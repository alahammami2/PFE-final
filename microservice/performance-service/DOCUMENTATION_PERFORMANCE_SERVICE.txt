================================================================================
                    DOCUMENTATION MICROSERVICE PERFORMANCE-SERVICE
                    Plateforme Intelligente - Gestion √âquipe Volleyball
================================================================================

üìä DESCRIPTION G√âN√âRALE
================================================================================
Le microservice performance-service est responsable de la gestion des performances,
des joueurs et des absences pour une √©quipe de volleyball. Il permet de cr√©er,
consulter, modifier et supprimer les donn√©es li√©es aux joueurs, leurs performances
et leurs absences.

üèóÔ∏è ARCHITECTURE TECHNIQUE
================================================================================
- Framework: Spring Boot 3.2.0
- Langage: Java 17
- Base de donn√©es: PostgreSQL
- Port: 8083
- Context Path: /api/performance
- S√©curit√©: Spring Security (d√©sactiv√©e pour d√©veloppement)
- Containerisation: Docker + Docker Compose
- DDL Mode: create-drop (pour r√©soudre les probl√®mes de sch√©ma)

üìä MOD√àLE DE DONN√âES
================================================================================

Table: players
--------------
- id (BIGSERIAL PRIMARY KEY) - Identifiant unique
- nom (VARCHAR(100) NOT NULL) - Nom du joueur
- prenom (VARCHAR(100) NOT NULL) - Pr√©nom du joueur
- email (VARCHAR(150) UNIQUE) - Email du joueur
- telephone (VARCHAR(20)) - Num√©ro de t√©l√©phone
- date_naissance (DATE NOT NULL) - Date de naissance
- position (VARCHAR(20) NOT NULL) - Position du joueur (ENUM)
- numero_maillot (INTEGER UNIQUE) - Num√©ro de maillot
- taille_cm (INTEGER) - Taille en centim√®tres
- poids_kg (DECIMAL) - Poids en kilogrammes
- statut (VARCHAR(20) NOT NULL) - Statut du joueur (ENUM)
- date_debut_equipe (DATE) - Date d'entr√©e dans l'√©quipe
- actif (BOOLEAN DEFAULT TRUE) - Statut actif/inactif
- date_creation (TIMESTAMP DEFAULT CURRENT_TIMESTAMP) - Date de cr√©ation
- date_modification (TIMESTAMP) - Date de derni√®re modification

Positions support√©es:
- LIBERO: Lib√©ro
- PASSEUR: Passeur
- ATTAQUANT: Attaquant
- CENTRAL: Central
- RECEPTEUR_ATTAQUANT: R√©cepteur-Attaquant

Statuts support√©s:
- ACTIF: Joueur actif
- INACTIF: Joueur inactif
- BLESSE: Joueur bless√©
- SUSPENDU: Joueur suspendu

Table: absences
---------------
- id (BIGSERIAL PRIMARY KEY) - Identifiant unique
- player_id (BIGINT NOT NULL) - R√©f√©rence vers le joueur
- date_absence (DATE NOT NULL) - Date de l'absence
- type_absence (VARCHAR(20) NOT NULL) - Type d'absence (ENUM)
- justifiee (BOOLEAN DEFAULT FALSE) - Absence justifi√©e ou non
- commentaire (VARCHAR(500)) - Commentaire sur l'absence
- date_creation (TIMESTAMP DEFAULT CURRENT_TIMESTAMP) - Date de cr√©ation
- date_modification (TIMESTAMP) - Date de derni√®re modification

Types d'absence support√©s:
- MALADIE: Maladie
- BLESSURE: Blessure
- PERSONNEL: Raison personnelle
- AUTRE: Autre raison

Table: performances
-------------------
- id (BIGSERIAL PRIMARY KEY) - Identifiant unique
- player_id (BIGINT NOT NULL) - R√©f√©rence vers le joueur
- date_evaluation (DATE NOT NULL) - Date de l'√©valuation
- type_performance (VARCHAR(20) NOT NULL) - Type de performance (ENUM)
- note_globale (DECIMAL NOT NULL) - Note globale (0-10)
- commentaire (VARCHAR(500)) - Commentaire sur la performance
- date_creation (TIMESTAMP DEFAULT CURRENT_TIMESTAMP) - Date de cr√©ation
- date_modification (TIMESTAMP) - Date de derni√®re modification

Types de performance support√©s:
- ENTRAINEMENT: Performance en entra√Ænement
- MATCH: Performance en match
- EVALUATION: √âvaluation g√©n√©rale

üîó ENDPOINTS API
================================================================================

Base URL: http://localhost:8083/api/performance

1. ENDPOINTS PLAYERS (Joueurs)
   ============================

1.1. CR√âER UN JOUEUR
     ----------------
     POST /players
     Content-Type: application/json
     
     Body (exemple):
     {
       "nom": "Dupont",
       "prenom": "Jean",
       "email": "jean.dupont@email.com",
       "telephone": "0123456789",
       "dateNaissance": "1995-05-15",
       "position": "ATTAQUANT",
       "numeroMaillot": 10,
       "tailleCm": 185,
       "poidsKg": 75.5,
       "statut": "ACTIF",
       "dateDebutEquipe": "2024-01-01"
     }
     
     R√©ponse succ√®s:
     {
       "id": 1,
       "nom": "Dupont",
       "prenom": "Jean",
       "email": "jean.dupont@email.com",
       "telephone": "0123456789",
       "dateNaissance": "1995-05-15",
       "position": "ATTAQUANT",
       "numeroMaillot": 10,
       "tailleCm": 185,
       "poidsKg": 75.5,
       "statut": "ACTIF",
       "dateDebutEquipe": "2024-01-01",
       "actif": true,
       "dateCreation": "2025-01-09T00:00:00",
       "dateModification": null
     }

1.2. R√âCUP√âRER TOUS LES JOUEURS
     ---------------------------
     GET /players
     Description: R√©cup√®re tous les joueurs
     
     R√©ponse:
     [
       {
         "id": 1,
         "nom": "Dupont",
         "prenom": "Jean",
         "position": "ATTAQUANT",
         "numeroMaillot": 10,
         "statut": "ACTIF",
         "actif": true
       }
     ]

1.3. R√âCUP√âRER UN JOUEUR PAR ID
     ---------------------------
     GET /players/{id}
     Param√®tre: id (Long) - Identifiant du joueur
     
     Exemple: GET /players/1

1.4. R√âCUP√âRER LES JOUEURS ACTIFS
     -----------------------------
     GET /players/active
     Description: R√©cup√®re tous les joueurs avec statut ACTIF

1.5. R√âCUP√âRER LES JOUEURS PAR POSITION
     -----------------------------------
     GET /players/by-position/{position}
     Param√®tre: position (Position) - Position du joueur
     
     Exemples:
     - GET /players/by-position/ATTAQUANT
     - GET /players/by-position/PASSEUR
     - GET /players/by-position/LIBERO
     - GET /players/by-position/CENTRAL
     - GET /players/by-position/RECEPTEUR_ATTAQUANT

1.6. METTRE √Ä JOUR UN JOUEUR
     ------------------------
     PUT /players/{id}
     Content-Type: application/json
     
     Body: M√™mes champs que la cr√©ation

1.7. SUPPRIMER UN JOUEUR
     --------------------
     DELETE /players/{id}
     Param√®tre: id (Long) - Identifiant du joueur

2. ENDPOINTS ABSENCES
   ===================

2.1. CR√âER UNE ABSENCE
     ------------------
     POST /absences
     Content-Type: application/json
     
     Body (exemple):
     {
       "playerId": 1,
       "dateAbsence": "2025-01-15",
       "typeAbsence": "MALADIE",
       "justifiee": true,
       "commentaire": "Grippe saisonni√®re"
     }

2.2. R√âCUP√âRER TOUTES LES ABSENCES
     ------------------------------
     GET /absences
     Description: R√©cup√®re toutes les absences

2.3. R√âCUP√âRER UNE ABSENCE PAR ID
     -----------------------------
     GET /absences/{id}
     Param√®tre: id (Long) - Identifiant de l'absence

2.4. R√âCUP√âRER LES ABSENCES D'UN JOUEUR
     -----------------------------------
     GET /absences/player/{playerId}
     Param√®tre: playerId (Long) - Identifiant du joueur

2.5. R√âCUP√âRER LES ABSENCES ACTUELLES
     ---------------------------------
     GET /absences/current
     Description: R√©cup√®re les absences du jour actuel

2.6. R√âCUP√âRER LES STATISTIQUES D'ABSENCES
     --------------------------------------
     GET /absences/statistics
     Description: R√©cup√®re les statistiques globales des absences

2.7. METTRE √Ä JOUR UNE ABSENCE
     --------------------------
     PUT /absences/{id}
     Content-Type: application/json

2.8. SUPPRIMER UNE ABSENCE
     ----------------------
     DELETE /absences/{id}
     Param√®tre: id (Long) - Identifiant de l'absence

3. ENDPOINTS PERFORMANCES
   =======================

3.1. CR√âER UNE PERFORMANCE
     ----------------------
     POST /performances
     Content-Type: application/json
     
     Body (exemple):
     {
       "playerId": 1,
       "dateEvaluation": "2025-01-15",
       "typePerformance": "MATCH",
       "noteGlobale": 8.5,
       "commentaire": "Excellente performance en attaque"
     }

3.2. R√âCUP√âRER TOUTES LES PERFORMANCES
     ----------------------------------
     GET /performances
     Description: R√©cup√®re toutes les performances

3.3. R√âCUP√âRER UNE PERFORMANCE PAR ID
     ---------------------------------
     GET /performances/{id}
     Param√®tre: id (Long) - Identifiant de la performance

3.4. R√âCUP√âRER LES PERFORMANCES D'UN JOUEUR
     ---------------------------------------
     GET /performances/player/{playerId}
     Param√®tre: playerId (Long) - Identifiant du joueur

3.5. R√âCUP√âRER LES STATISTIQUES DE PERFORMANCES
     -------------------------------------------
     GET /performances/statistics
     Description: R√©cup√®re les statistiques globales des performances

3.6. METTRE √Ä JOUR UNE PERFORMANCE
     ------------------------------
     PUT /performances/{id}
     Content-Type: application/json

3.7. SUPPRIMER UNE PERFORMANCE
     --------------------------
     DELETE /performances/{id}
     Param√®tre: id (Long) - Identifiant de la performance

üîß LOGIQUE M√âTIER
================================================================================

1. GESTION DES JOUEURS
   -------------------
   - Validation des champs obligatoires (nom, prenom, dateNaissance, position, statut)
   - V√©rification de l'unicit√© de l'email et du num√©ro de maillot
   - Attribution automatique de actif=true et dateCreation=now()
   - Gestion des positions et statuts via des √©num√©rations
   - Calcul automatique de l'√¢ge bas√© sur la date de naissance

2. GESTION DES ABSENCES
   --------------------
   - Validation des champs obligatoires (playerId, dateAbsence, typeAbsence)
   - V√©rification de l'existence du joueur r√©f√©renc√©
   - Gestion des types d'absence via √©num√©ration
   - Calcul des statistiques d'absences par joueur et par type
   - Filtrage des absences par p√©riode

3. GESTION DES PERFORMANCES
   ------------------------
   - Validation des champs obligatoires (playerId, dateEvaluation, typePerformance, noteGlobale)
   - Validation de la note globale (doit √™tre entre 0 et 10)
   - V√©rification de l'existence du joueur r√©f√©renc√©
   - Calcul des moyennes de performances par joueur et par type
   - G√©n√©ration de statistiques de performances

üöÄ D√âPLOIEMENT DOCKER
================================================================================

1. PR√âREQUIS
   ---------
   - Docker et Docker Compose install√©s
   - Port 8083 disponible (service)
   - Port 5433 disponible (PostgreSQL)

2. COMMANDES DE D√âPLOIEMENT
   ------------------------
   # Construction et d√©marrage des conteneurs
   docker-compose up --build -d
   
   # V√©rification du statut
   docker-compose ps
   
   # Consultation des logs
   docker-compose logs performance-service
   docker-compose logs postgres
   
   # Arr√™t des conteneurs
   docker-compose down

3. CONFIGURATION DOCKER
   ---------------------
   - Base de donn√©es: PostgreSQL 15-alpine
   - Port PostgreSQL: 5433 (externe) -> 5432 (interne)
   - Port Service: 8083
   - R√©seau: performance-network
   - Volume: postgres_data (persistance des donn√©es)

üß™ TESTS ET EXEMPLES
================================================================================

1. TEST POWERSHELL - CR√âER UN JOUEUR
   ----------------------------------
   $playerData = @{
       nom = "Dupont"
       prenom = "Jean"
       email = "jean.dupont@email.com"
       telephone = "0123456789"
       dateNaissance = "1995-05-15"
       position = "ATTAQUANT"
       numeroMaillot = 10
       tailleCm = 185
       poidsKg = 75.5
       statut = "ACTIF"
       dateDebutEquipe = "2024-01-01"
   } | ConvertTo-Json

   Invoke-WebRequest -Uri "http://localhost:8083/api/performance/players" -Method POST -Body $playerData -ContentType "application/json"

2. TEST POWERSHELL - CR√âER UNE ABSENCE
   ------------------------------------
   $absenceData = @{
       playerId = 1
       dateAbsence = "2025-01-15"
       typeAbsence = "MALADIE"
       justifiee = $true
       commentaire = "Grippe"
   } | ConvertTo-Json

   Invoke-WebRequest -Uri "http://localhost:8083/api/performance/absences" -Method POST -Body $absenceData -ContentType "application/json"

3. TEST POWERSHELL - CR√âER UNE PERFORMANCE
   ----------------------------------------
   $performanceData = @{
       playerId = 1
       dateEvaluation = "2025-01-15"
       typePerformance = "MATCH"
       noteGlobale = 8.5
       commentaire = "Excellente performance"
   } | ConvertTo-Json

   Invoke-WebRequest -Uri "http://localhost:8083/api/performance/performances" -Method POST -Body $performanceData -ContentType "application/json"

4. TESTS RAPIDES GET
   ------------------
   # R√©cup√©rer tous les joueurs
   Invoke-WebRequest -Uri "http://localhost:8083/api/performance/players"
   
   # R√©cup√©rer toutes les absences
   Invoke-WebRequest -Uri "http://localhost:8083/api/performance/absences"
   
   # R√©cup√©rer toutes les performances
   Invoke-WebRequest -Uri "http://localhost:8083/api/performance/performances"
   
   # Statistiques d'absences
   Invoke-WebRequest -Uri "http://localhost:8083/api/performance/absences/statistics"
   
   # Statistiques de performances
   Invoke-WebRequest -Uri "http://localhost:8083/api/performance/performances/statistics"

üîç D√âPANNAGE
================================================================================

1. ERREURS COURANTES
   -----------------
   - Erreur 400 "Bad Request": V√©rifier que tous les champs obligatoires sont pr√©sents
   - Erreur de connexion: V√©rifier que les conteneurs Docker sont d√©marr√©s
   - Erreur de sch√©ma: Le mode create-drop r√©sout automatiquement les probl√®mes de sch√©ma

2. V√âRIFICATIONS
   --------------
   - Service actif: docker-compose ps
   - Logs du service: docker-compose logs performance-service
   - Logs de la base: docker-compose logs postgres
   - Test de connectivit√©: curl http://localhost:8083/api/performance/players

3. R√âSOLUTION DE PROBL√àMES
   ------------------------
   - Red√©marrer les conteneurs: docker-compose restart
   - Reconstruire: docker-compose up --build -d
   - Nettoyer: docker-compose down && docker-compose up -d

üìù NOTES IMPORTANTES
================================================================================

1. S√âCURIT√â
   --------
   - Authentification d√©sactiv√©e pour le d√©veloppement
   - En production, activer Spring Security
   - Configurer HTTPS et les certificats SSL

2. PERFORMANCE
   -----------
   - Index cr√©√©s sur les colonnes fr√©quemment utilis√©es
   - Pagination recommand√©e pour les grandes listes
   - Cache Redis recommand√© en production

3. MAINTENANCE
   -----------
   - Sauvegardes r√©guli√®res de la base PostgreSQL
   - Monitoring des performances via Spring Actuator
   - Logs centralis√©s recommand√©s (ELK Stack)

================================================================================
                              FIN DE DOCUMENTATION
                        Performance Service v1.0.0 - 2025
================================================================================
