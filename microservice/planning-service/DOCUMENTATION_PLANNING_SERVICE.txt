================================================================================
                    DOCUMENTATION MICROSERVICE PLANNING-SERVICE
                    Plateforme Intelligente - Gestion √âquipe Volleyball
================================================================================

üìÖ DESCRIPTION G√âN√âRALE
================================================================================
Le microservice planning-service est responsable de la gestion des √©v√©nements 
et de la planification pour une √©quipe de volleyball. Il permet de cr√©er, 
consulter, modifier et supprimer des √©v√©nements (entra√Ænements, matchs, 
r√©unions, comp√©titions, etc.).

üèóÔ∏è ARCHITECTURE TECHNIQUE
================================================================================
- Framework: Spring Boot 3.2.0
- Langage: Java 21
- Base de donn√©es: PostgreSQL
- Port: 8082
- Context Path: /api/planning
- S√©curit√©: Spring Security (d√©sactiv√©e pour d√©veloppement)
- Containerisation: Docker + Docker Compose

üìä MOD√àLE DE DONN√âES
================================================================================

Table: events
-------------
- id (BIGSERIAL PRIMARY KEY) - Identifiant unique
- titre (VARCHAR(100) NOT NULL) - Titre de l'√©v√©nement
- description (VARCHAR(500)) - Description d√©taill√©e
- date_debut (TIMESTAMP NOT NULL) - Date et heure de d√©but
- date_fin (TIMESTAMP NOT NULL) - Date et heure de fin
- type (VARCHAR(20) NOT NULL) - Type d'√©v√©nement (ENUM)
- lieu (VARCHAR(200)) - Lieu de l'√©v√©nement
- actif (BOOLEAN DEFAULT TRUE) - Statut actif/inactif
- date_creation (TIMESTAMP DEFAULT CURRENT_TIMESTAMP) - Date de cr√©ation
- date_modification (TIMESTAMP) - Date de derni√®re modification

Types d'√©v√©nements support√©s:
- ENTRAINEMENT: Entra√Ænement
- MATCH: Match
- REUNION: R√©union
- COMPETITION: Comp√©tition
- EVENEMENT: √âv√©nement
- AUTRE: Autre

Index cr√©√©s:
- idx_events_actif ON events(actif)
- idx_events_type ON events(type)
- idx_events_date_debut ON events(date_debut)
- idx_events_date_fin ON events(date_fin)

üîó ENDPOINTS API
================================================================================

Base URL: http://localhost:8082/api/planning

1. HEALTH CHECK
   ------------
   GET /health
   Description: V√©rifier l'√©tat du service
   R√©ponse:
   {
     "success": true,
     "message": "Service de planification op√©rationnel",
     "data": "Planning Service v1.0.0"
   }

2. CR√âER UN √âV√âNEMENT
   ------------------
   POST /events
   Content-Type: application/json
   
   Body (exemple):
   {
     "titre": "Entra√Ænement √âquipe Senior",
     "description": "Entra√Ænement technique et tactique",
     "dateDebut": "2025-08-08T18:00:00",
     "dateFin": "2025-08-08T20:00:00",
     "type": "ENTRAINEMENT",
     "lieu": "Gymnase Municipal"
   }
   
   R√©ponse succ√®s:
   {
     "success": true,
     "message": "√âv√©nement cr√©√© avec succ√®s",
     "data": {
       "id": 1,
       "titre": "Entra√Ænement √âquipe Senior",
       "description": "Entra√Ænement technique et tactique",
       "dateDebut": "2025-08-08T18:00:00",
       "dateFin": "2025-08-08T20:00:00",
       "type": "ENTRAINEMENT",
       "lieu": "Gymnase Municipal",
       "actif": true,
       "dateCreation": "2025-08-08T01:30:00",
       "dateModification": null
     }
   }

3. R√âCUP√âRER TOUS LES √âV√âNEMENTS
   -----------------------------
   GET /events
   Description: R√©cup√®re tous les √©v√©nements actifs
   
   R√©ponse:
   {
     "success": true,
     "message": "√âv√©nements r√©cup√©r√©s avec succ√®s",
     "data": [
       {
         "id": 1,
         "titre": "Entra√Ænement technique",
         "description": "...",
         "dateDebut": "2025-08-09T18:00:00",
         "dateFin": "2025-08-09T20:00:00",
         "type": "ENTRAINEMENT",
         "lieu": "Gymnase principal",
         "actif": true,
         "dateCreation": "2025-08-08T01:30:00",
         "dateModification": null
       }
     ]
   }

4. R√âCUP√âRER UN √âV√âNEMENT PAR ID
   -----------------------------
   GET /events/{id}
   Param√®tre: id (Long) - Identifiant de l'√©v√©nement
   
   Exemple: GET /events/1
   
   R√©ponse succ√®s:
   {
     "success": true,
     "message": "√âv√©nement r√©cup√©r√© avec succ√®s",
     "data": { ... }
   }
   
   R√©ponse erreur (√©v√©nement non trouv√©):
   {
     "success": false,
     "message": "Erreur lors de la r√©cup√©ration de l'√©v√©nement: √âv√©nement non trouv√© avec l'ID: 999"
   }

5. R√âCUP√âRER LES √âV√âNEMENTS PAR TYPE
   ---------------------------------
   GET /events/type/{type}
   Param√®tre: type (EventType) - Type d'√©v√©nement
   
   Exemples:
   - GET /events/type/ENTRAINEMENT
   - GET /events/type/MATCH
   - GET /events/type/COMPETITION
   - GET /events/type/REUNION
   - GET /events/type/EVENEMENT
   - GET /events/type/AUTRE

6. R√âCUP√âRER LES √âV√âNEMENTS √Ä VENIR
   --------------------------------
   GET /events/upcoming
   Description: R√©cup√®re tous les √©v√©nements futurs (date_debut > maintenant)
   
   R√©ponse: Liste des √©v√©nements √† venir tri√©s par date

7. R√âCUP√âRER LES √âV√âNEMENTS DU JOUR
   --------------------------------
   GET /events/today
   Description: R√©cup√®re tous les √©v√©nements du jour actuel
   
   R√©ponse: Liste des √©v√©nements d'aujourd'hui

8. SUPPRIMER UN √âV√âNEMENT
   ----------------------
   DELETE /events/{id}
   Param√®tre: id (Long) - Identifiant de l'√©v√©nement
   
   Exemple: DELETE /events/1
   
   R√©ponse succ√®s:
   {
     "success": true,
     "message": "√âv√©nement supprim√© avec succ√®s"
   }
   
   Note: Suppression physique (hard delete) - l'√©v√©nement est compl√®tement 
   supprim√© de la base de donn√©es.

üîß LOGIQUE M√âTIER
================================================================================

1. CR√âATION D'√âV√âNEMENTS
   ---------------------
   - Validation des champs obligatoires (titre, dateDebut, dateFin, type)
   - V√©rification que dateDebut < dateFin
   - Attribution automatique de actif=true et dateCreation=now()
   - Sauvegarde en base de donn√©es
   - Retour de l'√©v√©nement cr√©√© avec son ID

2. CONSULTATION D'√âV√âNEMENTS
   -------------------------
   - getAllEvents(): Retourne uniquement les √©v√©nements actifs (actif=true)
   - getEventById(): V√©rifie l'existence et le statut actif
   - getEventsByType(): Filtre par type ET statut actif
   - getUpcomingEvents(): Filtre par date future ET statut actif
   - getTodayEvents(): Filtre par date du jour ET statut actif

3. SUPPRESSION D'√âV√âNEMENTS
   ------------------------
   - V√©rification de l'existence de l'√©v√©nement
   - Suppression physique compl√®te de la base de donn√©es
   - Pas de soft delete (contrairement √† la version initiale)

4. GESTION DES ERREURS
   -------------------
   - √âv√©nement non trouv√©: RuntimeException avec message explicite
   - Validation √©chou√©e: Retour d'erreur avec d√©tails
   - Erreurs base de donn√©es: Gestion automatique par Spring

üõ†Ô∏è CONFIGURATION
================================================================================

Application Properties (application.yml):
- Port: 8082
- Context-path: /api/planning
- Base de donn√©es: PostgreSQL sur localhost:5432
- Database: planning_db
- User: planning_user
- Password: root
- JPA: Hibernate avec DDL auto=none
- Initialisation SQL: schema.sql

S√©curit√©:
- Spring Security configur√© pour permettre l'acc√®s libre
- CSRF d√©sactiv√©
- Sessions stateless
- Authentification d√©sactiv√©e (d√©veloppement)

Docker:
- Image base: openjdk:21-jdk-slim
- Port expos√©: 8082
- Variables d'environnement pour PostgreSQL
- Docker Compose avec PostgreSQL 15

üìã DONN√âES DE TEST
================================================================================

Le fichier schema.sql ins√®re automatiquement 2 √©v√©nements de test:

1. √âv√©nement 1:
   - Titre: "Entra√Ænement technique"
   - Description: "Entra√Ænement focalis√© sur les techniques de base"
   - Type: ENTRAINEMENT
   - Lieu: "Gymnase principal"
   - Date: Demain +2h

2. √âv√©nement 2:
   - Titre: "Match amical"
   - Description: "Match amical contre l'√©quipe locale"
   - Type: MATCH
   - Lieu: "Salle de sport municipale"
   - Date: Dans 3 jours +3h

üß™ TESTS POSTMAN
================================================================================

Collection de tests recommand√©e:

1. Health Check - V√©rifier que le service fonctionne
2. GET /events - Voir les √©v√©nements de test
3. POST /events - Cr√©er un nouvel √©v√©nement
4. GET /events/{id} - R√©cup√©rer l'√©v√©nement cr√©√©
5. GET /events/type/ENTRAINEMENT - Filtrer par type
6. GET /events/upcoming - √âv√©nements futurs
7. GET /events/today - √âv√©nements du jour
8. DELETE /events/{id} - Supprimer un √©v√©nement
9. GET /events - V√©rifier que l'√©v√©nement est supprim√©

üöÄ D√âPLOIEMENT
================================================================================

Local (sans Docker):
1. D√©marrer PostgreSQL
2. Cr√©er la base planning_db et l'utilisateur planning_user
3. Ex√©cuter schema.sql
4. mvn clean install
5. java -jar target/planning-service-1.0.0.jar

Docker:
1. docker-compose up --build -d
2. Le service sera accessible sur http://localhost:8082

Arr√™t Docker:
- docker-compose down

üí° EXEMPLES D'UTILISATION PRATIQUES
================================================================================

1. SC√âNARIO: PLANIFIER UN ENTRA√éNEMENT HEBDOMADAIRE
   ------------------------------------------------
   
   √âtape 1: Cr√©er l'entra√Ænement
   POST /api/planning/events
   {
     "titre": "Entra√Ænement Technique - Semaine 1",
     "description": "Travail sur les services et r√©ceptions",
     "dateDebut": "2025-08-12T18:00:00",
     "dateFin": "2025-08-12T20:00:00",
     "type": "ENTRAINEMENT",
     "lieu": "Gymnase Municipal - Terrain A"
   }
   
   √âtape 2: V√©rifier la cr√©ation
   GET /api/planning/events/upcoming
   ‚Üí Doit afficher le nouvel entra√Ænement

2. SC√âNARIO: ORGANISER UN MATCH DE CHAMPIONNAT
   -------------------------------------------
   
   √âtape 1: Cr√©er le match
   POST /api/planning/events
   {
     "titre": "Match Championnat vs √âtoile Sportive",
     "description": "Match de championnat r√©gional - Phase aller",
     "dateDebut": "2025-08-15T15:00:00",
     "dateFin": "2025-08-15T17:30:00",
     "type": "MATCH",
     "lieu": "Complexe Sportif Central"
   }
   
   √âtape 2: Consulter tous les matchs
   GET /api/planning/events/type/MATCH
   ‚Üí Affiche tous les matchs programm√©s

3. SC√âNARIO: PLANIFIER UNE COMP√âTITION
   ------------------------------------
   
   √âtape 1: Cr√©er l'√©v√©nement comp√©tition
   POST /api/planning/events
   {
     "titre": "Tournoi Inter-Clubs 2025",
     "description": "Participation au tournoi r√©gional inter-clubs",
     "dateDebut": "2025-08-20T08:00:00",
     "dateFin": "2025-08-20T18:00:00",
     "type": "COMPETITION",
     "lieu": "Centre Sportif R√©gional"
   }
   
   √âtape 2: V√©rifier les √©v√©nements du jour
   GET /api/planning/events/today (le 20/08/2025)
   ‚Üí Affiche la comp√©tition si ex√©cut√© le jour J

4. SC√âNARIO: ORGANISER UNE R√âUNION D'√âQUIPE
   ----------------------------------------
   
   POST /api/planning/events
   {
     "titre": "R√©union Strat√©gie Saison",
     "description": "Discussion sur les objectifs et la strat√©gie pour la nouvelle saison",
     "dateDebut": "2025-08-10T19:00:00",
     "dateFin": "2025-08-10T21:00:00",
     "type": "REUNION",
     "lieu": "Salle de r√©union - Club House"
   }

5. SC√âNARIO: ANNULER UN √âV√âNEMENT (SUPPRESSION)
   ---------------------------------------------
   
   √âtape 1: Identifier l'√©v√©nement √† supprimer
   GET /api/planning/events
   ‚Üí Noter l'ID de l'√©v√©nement √† annuler
   
   √âtape 2: Supprimer l'√©v√©nement
   DELETE /api/planning/events/3
   ‚Üí R√©ponse: "√âv√©nement supprim√© avec succ√®s"
   
   √âtape 3: V√©rifier la suppression
   GET /api/planning/events
   ‚Üí L'√©v√©nement ne doit plus appara√Ætre

6. SC√âNARIO: CONSULTER LE PLANNING DE LA SEMAINE
   ----------------------------------------------
   
   √âtape 1: Voir tous les √©v√©nements √† venir
   GET /api/planning/events/upcoming
   ‚Üí Affiche tous les √©v√©nements futurs tri√©s par date
   
   √âtape 2: Filtrer par type d'activit√©
   GET /api/planning/events/type/ENTRAINEMENT
   ‚Üí Affiche uniquement les entra√Ænements
   
   GET /api/planning/events/type/MATCH
   ‚Üí Affiche uniquement les matchs

7. SC√âNARIO: V√âRIFICATION QUOTIDIENNE
   ----------------------------------
   
   Chaque matin, consulter les √©v√©nements du jour:
   GET /api/planning/events/today
   
   Exemple de r√©ponse:
   {
     "success": true,
     "message": "√âv√©nements du jour r√©cup√©r√©s avec succ√®s",
     "data": [
       {
         "id": 5,
         "titre": "Entra√Ænement Technique",
         "dateDebut": "2025-08-08T18:00:00",
         "dateFin": "2025-08-08T20:00:00",
         "type": "ENTRAINEMENT",
         "lieu": "Gymnase Municipal"
       }
     ]
   }

8. SC√âNARIO: GESTION D'ERREURS COURANTES
   -------------------------------------
   
   Erreur 1: √âv√©nement non trouv√©
   GET /api/planning/events/999
   R√©ponse:
   {
     "success": false,
     "message": "Erreur lors de la r√©cup√©ration de l'√©v√©nement: √âv√©nement non trouv√© avec l'ID: 999"
   }
   
   Erreur 2: Donn√©es manquantes lors de la cr√©ation
   POST /api/planning/events
   {
     "titre": "Test"
     // dateDebut et dateFin manquantes
   }
   R√©ponse: Erreur de validation avec d√©tails des champs manquants

9. SC√âNARIO: WORKFLOW COMPLET D'UNE JOURN√âE TYPE
   ----------------------------------------------
   
   Matin (9h00):
   1. GET /api/planning/health ‚Üí V√©rifier que le service fonctionne
   2. GET /api/planning/events/today ‚Üí Voir les √©v√©nements du jour
   3. GET /api/planning/events/upcoming ‚Üí Planifier les prochains jours
   
   Apr√®s-midi (14h00):
   4. POST /api/planning/events ‚Üí Cr√©er un nouvel entra√Ænement
   5. GET /api/planning/events/type/ENTRAINEMENT ‚Üí V√©rifier tous les entra√Ænements
   
   Soir (20h00):
   6. GET /api/planning/events ‚Üí Consulter le planning complet
   7. DELETE /api/planning/events/X ‚Üí Annuler un √©v√©nement si n√©cessaire

10. SC√âNARIO: INT√âGRATION AVEC D'AUTRES SERVICES
    ---------------------------------------------
    
    Le planning-service peut √™tre int√©gr√© avec d'autres microservices:
    
    - Service de notification: Envoyer des rappels avant les √©v√©nements
    - Service de gestion des joueurs: Associer les joueurs aux √©v√©nements
    - Service de statistiques: Analyser la fr√©quence des entra√Ænements
    
    Exemple d'int√©gration:
    1. GET /api/planning/events/upcoming ‚Üí R√©cup√©rer les prochains √©v√©nements
    2. Pour chaque √©v√©nement, appeler le service de notification
    3. Envoyer des rappels aux joueurs concern√©s

üîÑ EXEMPLES DE TESTS AUTOMATIS√âS
================================================================================

Test 1: Cycle de vie complet d'un √©v√©nement
1. POST /events ‚Üí Cr√©er
2. GET /events/{id} ‚Üí V√©rifier cr√©ation
3. GET /events ‚Üí V√©rifier dans la liste
4. DELETE /events/{id} ‚Üí Supprimer
5. GET /events/{id} ‚Üí V√©rifier suppression (doit √©chouer)

Test 2: Validation des types d'√©v√©nements
1. POST /events avec type="ENTRAINEMENT" ‚Üí Succ√®s
2. POST /events avec type="MATCH" ‚Üí Succ√®s
3. POST /events avec type="INVALID" ‚Üí √âchec

Test 3: Filtrage par date
1. Cr√©er √©v√©nement hier ‚Üí POST /events
2. Cr√©er √©v√©nement aujourd'hui ‚Üí POST /events
3. Cr√©er √©v√©nement demain ‚Üí POST /events
4. GET /events/today ‚Üí Doit retourner seulement aujourd'hui
5. GET /events/upcoming ‚Üí Doit retourner aujourd'hui + demain

üì± EXEMPLES D'UTILISATION MOBILE/WEB
================================================================================

Interface Web - Dashboard Coach:
- Affichage calendrier avec GET /events/upcoming
- Formulaire cr√©ation √©v√©nement avec POST /events
- Boutons de suppression avec DELETE /events/{id}

Application Mobile - Joueurs:
- Notification push bas√©e sur GET /events/today
- Liste des prochains entra√Ænements avec GET /events/type/ENTRAINEMENT
- D√©tails d'un match avec GET /events/{id}

Tableau de Bord Administrateur:
- Statistiques avec GET /events (compter par type)
- Planning hebdomadaire avec GET /events/upcoming
- Gestion des √©v√©nements avec tous les endpoints CRUD

üìù NOTES IMPORTANTES
================================================================================

- Le service utilise une suppression physique (hard delete)
- Tous les endpoints retournent un format JSON standardis√©
- La s√©curit√© est d√©sactiv√©e pour le d√©veloppement
- Les dates doivent √™tre au format ISO 8601 (YYYY-MM-DDTHH:mm:ss)
- Le service g√®re automatiquement les fuseaux horaires
- Les √©v√©nements inactifs ne sont pas retourn√©s par les endpoints de consultation
- Tous les exemples utilisent des donn√©es r√©alistes pour une √©quipe de volleyball
- Les horaires respectent les cr√©neaux typiques d'entra√Ænement (18h-20h)
- Les lieux sont adapt√©s √† la pratique du volleyball

================================================================================
                            FIN DE DOCUMENTATION
================================================================================
