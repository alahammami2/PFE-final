================================================================================
                    EXEMPLES D'UTILISATION - SERVICE AUTH
                         Plateforme Volley-ball COK
================================================================================

üìã TABLE DES MATI√àRES
================================================================================
1. Exemples d'appels API
2. Sc√©narios d'utilisation
3. Int√©gration avec autres services
4. Tests et validation
5. Codes d'erreur d√©taill√©s
6. Bonnes pratiques

================================================================================
1. EXEMPLES D'APPELS API
================================================================================

üîê CONNEXION UTILISATEUR :

REQUEST :
POST http://localhost:8081/api/auth/login
Content-Type: application/json

{
    "email": "admin@cok.tn",
    "motDePasse": "password123"
}

RESPONSE SUCC√àS (200) :
{
    "success": true,
    "message": "Connexion r√©ussie",
    "data": {
        "token": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkBjb2sudG4iLCJ1c2VySWQiOjEsInJvbGUiOiJBRE1JTiIsIm5vbSI6IkFkbWluIiwicHJlbm9tIjoiU3lzdGVtIiwiaWF0IjoxNjkxMjM0NTY3LCJleHAiOjE2OTEzMjA5Njd9.signature",
        "user": {
            "id": 1,
            "nom": "Admin",
            "prenom": "System",
            "email": "admin@cok.tn",
            "role": "ADMIN",
            "actif": true,
            "dateCreation": "2025-08-07T10:30:00Z"
        }
    }
}

RESPONSE √âCHEC (401) :
{
    "success": false,
    "message": "Email ou mot de passe incorrect",
    "data": null
}

================================================================================

üë§ CR√âATION UTILISATEUR (ADMIN SEULEMENT) :

REQUEST :
POST http://localhost:8081/api/auth/create-user
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiJ9...

{
    "nom": "Nouveau",
    "prenom": "Joueur",
    "email": "nouveau.joueur@cok.tn",
    "motDePasse": "motdepasse123",
    "role": "JOUEUR"
}

RESPONSE SUCC√àS (201) :
{
    "success": true,
    "message": "Utilisateur cr√©√© avec succ√®s",
    "data": {
        "id": 6,
        "nom": "Nouveau",
        "prenom": "Joueur",
        "email": "nouveau.joueur@cok.tn",
        "role": "JOUEUR",
        "actif": true,
        "dateCreation": "2025-08-07T11:00:00Z"
    }
}

================================================================================

üè• V√âRIFICATION SANT√â SERVICE :

REQUEST :
GET http://localhost:8081/api/auth/health

RESPONSE (200) :
{
    "success": true,
    "message": "Service d'authentification op√©rationnel",
    "data": "OK"
}

================================================================================

üé≠ R√îLES DISPONIBLES DANS LE SYST√àME :

ADMIN : Administrateur syst√®me
- Gestion compl√®te des utilisateurs
- Configuration syst√®me
- Acc√®s √† tous les modules

COACH : Entra√Æneur
- Gestion de son √©quipe
- Planification des entra√Ænements
- Gestion des matchs

JOUEUR : Joueur de l'√©quipe
- Consultation de son profil
- Participation aux activit√©s
- Suivi de ses performances

RESPONSABLE_FINANCIER : Gestionnaire financier
- Gestion des budgets
- Suivi des paiements
- Rapports financiers

STAFF_MEDICAL : Personnel m√©dical
- Suivi m√©dical des joueurs
- Gestion des blessures
- Rapports de sant√©

INVITE : Invit√©/Visiteur
- Acc√®s limit√© en lecture seule
- Consultation des informations publiques

‚ö†Ô∏è IMPORTANT : L'auth-service fournit uniquement le R√îLE.
Les permissions d√©taill√©es sont g√©r√©es par chaque microservice !

================================================================================
2. SC√âNARIOS D'UTILISATION
================================================================================

üéØ SC√âNARIO 1 : CONNEXION COACH

1. Le coach ouvre l'application mobile
2. Saisit email : coach@cok.tn
3. Saisit mot de passe : password123
4. L'app envoie POST /api/auth/login
5. R√©ception du token JWT
6. Stockage s√©curis√© du token (Keychain/Keystore)
7. Utilisation du token pour les requ√™tes suivantes

UTILISATION TOKEN :
Authorization: Bearer eyJhbGciOiJIUzI1NiJ9...

================================================================================

üéØ SC√âNARIO 2 : CR√âATION RESPONSABLE FINANCIER PAR ADMIN

1. Admin connect√© acc√®de √† la gestion utilisateurs
2. Clique "Ajouter nouveau responsable financier"
3. Remplit le formulaire :
   - Nom : "Benali"
   - Pr√©nom : "Karim"
   - Email : "karim.benali@cok.tn"
   - Mot de passe : "temp123"
   - R√¥le : "RESPONSABLE_FINANCIER"
4. Soumission du formulaire
5. Appel API avec token admin
6. Cr√©ation r√©ussie
7. Email de bienvenue envoy√© (futur)

üéØ SC√âNARIO 3 : CR√âATION STAFF M√âDICAL PAR ADMIN

1. Admin connect√© acc√®de √† la gestion utilisateurs
2. Clique "Ajouter nouveau staff m√©dical"
3. Remplit le formulaire :
   - Nom : "Docteur"
   - Pr√©nom : "Amina"
   - Email : "dr.amina@cok.tn"
   - Mot de passe : "medical123"
   - R√¥le : "STAFF_MEDICAL"
4. Soumission du formulaire
5. Appel API avec token admin
6. Cr√©ation r√©ussie
7. Acc√®s aux modules m√©dicaux activ√©

================================================================================

üéØ SC√âNARIO 3 : EXPIRATION TOKEN

1. Utilisateur connect√© depuis 25h
2. Tentative d'acc√®s √† une ressource prot√©g√©e
3. Token expir√© d√©tect√©
4. Redirection vers page de connexion
5. Nouvelle authentification requise
6. Nouveau token g√©n√©r√©

GESTION EXPIRATION :
- V√©rification automatique c√¥t√© client
- Refresh token (√† impl√©menter)
- D√©connexion automatique

================================================================================
3. INT√âGRATION AVEC AUTRES SERVICES
================================================================================

üîó COMMUNICATION INTER-SERVICES :

SERVICE √âQUIPE ‚Üí AUTH SERVICE :
GET /api/auth/validate-token
Header: Authorization: Bearer <token>

R√©ponse :
{
    "valid": true,
    "userId": 1,
    "role": "COACH",
    "email": "coach@cok.tn"
}

SERVICE MATCH ‚Üí AUTH SERVICE :
POST /api/auth/check-permission
{
    "token": "eyJ...",
    "resource": "match",
    "action": "create"
}

R√©ponse :
{
    "authorized": true,
    "userRole": "COACH"
}

================================================================================

üõ°Ô∏è MIDDLEWARE D'AUTHENTIFICATION :

Chaque service doit impl√©menter :

1. Extraction du token JWT
2. Validation avec auth-service
3. Extraction des informations utilisateur
4. Contr√¥le des permissions
5. Passage √† la logique m√©tier

EXEMPLE PSEUDO-CODE :
```
function authenticateRequest(request) {
    token = extractToken(request.headers.authorization)
    if (!token) return unauthorized()
    
    userInfo = validateTokenWithAuthService(token)
    if (!userInfo.valid) return unauthorized()
    
    request.user = userInfo
    return next()
}
```

================================================================================
4. TESTS ET VALIDATION
================================================================================

üß™ TESTS UNITAIRES :

TEST CONNEXION R√âUSSIE :
- Email valide + mot de passe correct
- V√©rification g√©n√©ration token
- Validation format r√©ponse

TEST CONNEXION √âCHOU√âE :
- Email inexistant
- Mot de passe incorrect
- Compte d√©sactiv√©

TEST CR√âATION UTILISATEUR :
- Donn√©es valides
- Email d√©j√† existant
- R√¥le invalide
- Permissions insuffisantes

================================================================================

üîç TESTS D'INT√âGRATION :

POSTMAN COLLECTION :
1. Health Check
2. Login Admin
3. Create User (avec token admin)
4. Login nouveau utilisateur
5. Access denied (sans token)
6. Token expiration

CURL COMMANDS :
# Test connexion
curl -X POST http://localhost:8081/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"admin@cok.tn","motDePasse":"password123"}'

# Test avec token
curl -X POST http://localhost:8081/api/auth/create-user \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_TOKEN" \
  -d '{"nom":"Test","prenom":"User","email":"test@cok.tn","motDePasse":"test123","role":"JOUEUR"}'

================================================================================
5. CODES D'ERREUR D√âTAILL√âS
================================================================================

üìã CODES HTTP ET MESSAGES :

200 OK :
- Connexion r√©ussie
- Op√©ration termin√©e avec succ√®s

201 CREATED :
- Utilisateur cr√©√© avec succ√®s

400 BAD REQUEST :
- Donn√©es de requ√™te invalides
- Format email incorrect
- Mot de passe trop faible
- Champs obligatoires manquants

401 UNAUTHORIZED :
- Email ou mot de passe incorrect
- Token JWT invalide
- Token JWT expir√©
- Aucun token fourni

403 FORBIDDEN :
- Permissions insuffisantes
- R√¥le non autoris√© pour cette action
- Compte d√©sactiv√©

404 NOT FOUND :
- Endpoint non trouv√©
- Utilisateur non trouv√©

409 CONFLICT :
- Email d√©j√† utilis√©
- Conflit de donn√©es

500 INTERNAL SERVER ERROR :
- Erreur base de donn√©es
- Erreur interne du serveur
- Configuration incorrecte

503 SERVICE UNAVAILABLE :
- Service temporairement indisponible
- Base de donn√©es inaccessible

================================================================================

üîç MESSAGES D'ERREUR SP√âCIFIQUES :

VALIDATION :
- "L'email est obligatoire"
- "Format d'email invalide"
- "Le mot de passe doit contenir au moins 8 caract√®res"
- "Le r√¥le sp√©cifi√© n'existe pas"

AUTHENTIFICATION :
- "Email ou mot de passe incorrect"
- "Votre compte a √©t√© d√©sactiv√©"
- "Token d'authentification invalide"
- "Votre session a expir√©"

AUTORISATION :
- "Acc√®s refus√© : permissions insuffisantes"
- "Seuls les administrateurs peuvent effectuer cette action"
- "Vous ne pouvez pas modifier cet utilisateur"

TECHNIQUE :
- "Erreur de connexion √† la base de donn√©es"
- "Service temporairement indisponible"
- "Erreur interne du serveur"

================================================================================
6. BONNES PRATIQUES
================================================================================

üîí S√âCURIT√â :

C√îT√â CLIENT :
- Stockage s√©curis√© du token (Keychain/Keystore)
- Transmission uniquement en HTTPS
- Nettoyage du token √† la d√©connexion
- Gestion automatique de l'expiration

C√îT√â SERVEUR :
- Validation stricte des entr√©es
- Logs de s√©curit√© d√©taill√©s
- Rate limiting (√† impl√©menter)
- Rotation r√©guli√®re des cl√©s JWT

================================================================================

‚ö° PERFORMANCE :

OPTIMISATIONS :
- Cache des tokens valid√©s (Redis)
- Pool de connexions DB optimis√©
- Index sur colonnes de recherche
- Pagination des r√©sultats

MONITORING :
- Temps de r√©ponse API
- Taux d'erreur
- Utilisation m√©moire
- Connexions DB actives

================================================================================

üîß MAINTENANCE :

LOGS √Ä SURVEILLER :
- Tentatives de connexion √©chou√©es r√©p√©t√©es
- Erreurs de base de donn√©es
- Tokens expir√©s fr√©quents
- Pics d'utilisation

M√âTRIQUES IMPORTANTES :
- Nombre de connexions/heure
- Taux de succ√®s authentification
- Temps moyen de r√©ponse
- Utilisation ressources

SAUVEGARDE :
- Base de donn√©es quotidienne
- Configuration application
- Logs de s√©curit√©
- Cl√©s de chiffrement

================================================================================
üìû SUPPORT TECHNIQUE
================================================================================
En cas de probl√®me :
1. V√©rifier les logs application
2. Tester la connectivit√© DB
3. Valider la configuration JWT
4. Contr√¥ler les permissions utilisateur

Contacts :
- √âquipe d√©veloppement : dev@cok.tn
- Support technique : support@cok.tn
- Urgences : +216 XX XXX XXX

Version : 1.0.0
Derni√®re mise √† jour : 07/08/2025
================================================================================

================================================================================
                    LOGIQUE M√âTIER - SERVICE D'AUTHENTIFICATION
                         Plateforme Volley-ball COK
================================================================================

üìã TABLE DES MATI√àRES
================================================================================
1. Vue d'ensemble du service
2. Architecture et composants
3. Mod√®le de donn√©es
4. Flux d'authentification
5. Gestion des r√¥les et permissions
6. S√©curit√© et JWT
7. Endpoints disponibles
8. Gestion des erreurs
9. Configuration et d√©ploiement

================================================================================
1. VUE D'ENSEMBLE DU SERVICE
================================================================================

üéØ OBJECTIF PRINCIPAL :
Le service d'authentification (auth-service) est responsable de :
- Authentifier les utilisateurs de la plateforme volley-ball
- G√©rer les sessions utilisateur via JWT
- Contr√¥ler l'acc√®s bas√© sur les r√¥les (RBAC)
- Fournir une API s√©curis√©e pour les autres microservices

üèóÔ∏è ARCHITECTURE :
- Microservice Spring Boot ind√©pendant
- Base de donn√©es PostgreSQL d√©di√©e
- Communication via API REST
- S√©curit√© bas√©e sur JWT (JSON Web Tokens)
- Port d'√©coute : 8081
- Context path : /api/auth

================================================================================
2. ARCHITECTURE ET COMPOSANTS
================================================================================

üìÅ STRUCTURE DU PROJET :
auth-service/
‚îú‚îÄ‚îÄ src/main/java/com/volleyball/authservice/
‚îÇ   ‚îú‚îÄ‚îÄ controller/     # Contr√¥leurs REST
‚îÇ   ‚îú‚îÄ‚îÄ service/        # Logique m√©tier
‚îÇ   ‚îú‚îÄ‚îÄ repository/     # Acc√®s aux donn√©es
‚îÇ   ‚îú‚îÄ‚îÄ model/          # Entit√©s JPA
‚îÇ   ‚îú‚îÄ‚îÄ dto/            # Objets de transfert
‚îÇ   ‚îú‚îÄ‚îÄ config/         # Configuration Spring
‚îÇ   ‚îî‚îÄ‚îÄ security/       # S√©curit√© JWT
‚îú‚îÄ‚îÄ src/main/resources/
‚îÇ   ‚îú‚îÄ‚îÄ application.yml # Configuration
‚îÇ   ‚îú‚îÄ‚îÄ schema.sql      # Structure DB
‚îÇ   ‚îî‚îÄ‚îÄ data.sql        # Donn√©es de test
‚îî‚îÄ‚îÄ pom.xml            # D√©pendances Maven

üîß COMPOSANTS PRINCIPAUX :

1. AuthController : Point d'entr√©e API
2. AuthService : Logique d'authentification
3. UserService : Gestion des utilisateurs
4. JwtUtil : G√©n√©ration/validation des tokens
5. CustomUserDetailsService : Int√©gration Spring Security
6. DatabaseInitializer : Initialisation automatique

================================================================================
3. MOD√àLE DE DONN√âES
================================================================================

üë§ ENTIT√â USER :
Table : users
Colonnes :
- id (BIGSERIAL) : Identifiant unique
- nom (VARCHAR(50)) : Nom de famille
- prenom (VARCHAR(50)) : Pr√©nom
- email (VARCHAR(100)) : Email unique (identifiant de connexion)
- mot_de_passe (VARCHAR(255)) : Mot de passe hash√© (BCrypt)
- role (VARCHAR(30)) : R√¥le utilisateur (ENUM: ADMIN, COACH, JOUEUR, RESPONSABLE_FINANCIER, STAFF_MEDICAL, INVITE)
- actif (BOOLEAN) : Statut actif/inactif
- date_creation (TIMESTAMP) : Date de cr√©ation
- date_modification (TIMESTAMP) : Derni√®re modification

üé≠ R√îLES DISPONIBLES :
- ADMIN : Administrateur syst√®me (acc√®s complet)
- COACH : Entra√Æneur (gestion √©quipe, matchs, entra√Ænements)
- JOUEUR : Joueur (consultation, participation)
- RESPONSABLE_FINANCIER : Responsable financier (gestion budget, paiements)
- STAFF_MEDICAL : Staff m√©dical (suivi sant√©, blessures)
- INVITE : Invit√© (acc√®s limit√© en lecture)

üìä INDEX OPTIMIS√âS :
- idx_users_email : Recherche rapide par email
- idx_users_role : Filtrage par r√¥le
- idx_users_actif : Filtrage par statut

================================================================================
4. FLUX D'AUTHENTIFICATION
================================================================================

üîê PROCESSUS DE CONNEXION :

1. R√âCEPTION DE LA DEMANDE :
   POST /api/auth/login
   Body: { "email": "user@cok.tn", "motDePasse": "password123" }

2. VALIDATION DES DONN√âES :
   - V√©rification format email
   - V√©rification pr√©sence mot de passe
   - Validation des contraintes

3. RECHERCHE UTILISATEUR :
   - Requ√™te en base par email
   - V√©rification existence utilisateur
   - Contr√¥le statut actif

4. V√âRIFICATION MOT DE PASSE :
   - Comparaison avec BCrypt
   - Hash stock√© vs mot de passe saisi

5. G√âN√âRATION TOKEN JWT :
   - Cr√©ation payload avec infos utilisateur
   - Signature avec cl√© secr√®te
   - D√©finition expiration (24h par d√©faut)

6. R√âPONSE SUCC√àS :
   {
     "success": true,
     "message": "Connexion r√©ussie",
     "data": {
       "token": "eyJhbGciOiJIUzI1NiJ9...",
       "user": { "id": 1, "nom": "Admin", ... }
     }
   }

üö´ GESTION DES √âCHECS :
- Email inexistant ‚Üí "Email ou mot de passe incorrect"
- Mot de passe incorrect ‚Üí "Email ou mot de passe incorrect"
- Compte inactif ‚Üí "Compte d√©sactiv√©"
- Erreur technique ‚Üí "Erreur interne du serveur"

================================================================================
5. GESTION DES R√îLES ET PERMISSIONS
================================================================================

‚ö†Ô∏è IMPORTANT - GESTION DES PERMISSIONS :

üö® L'AUTH-SERVICE NE G√àRE PAS LES PERMISSIONS D√âTAILL√âES !

Le service d'authentification se contente de :
‚úÖ Authentifier l'utilisateur
‚úÖ Fournir le R√îLE dans le token JWT
‚úÖ Valider les tokens

üéØ R√îLES FOURNIS DANS LE JWT :
- ADMIN
- COACH
- JOUEUR
- RESPONSABLE_FINANCIER
- STAFF_MEDICAL
- INVITE

üîí GESTION DES PERMISSIONS D√âTAILL√âES :
Les permissions sp√©cifiques (qui peut faire quoi) sont g√©r√©es par :
‚ùå PAS dans l'auth-service
‚úÖ Dans chaque microservice m√©tier
‚úÖ Selon la logique business de chaque service
‚úÖ En fonction du r√¥le fourni par le JWT

EXEMPLE :
- Auth-service dit : "Utilisateur = COACH"
- Service-match d√©cide : "Un COACH peut cr√©er des matchs pour son √©quipe"
- Service-finance d√©cide : "Un COACH ne peut pas voir les budgets"

  CONTR√îLE D'ACC√àS :
- JWT contient uniquement le R√îLE
- Chaque service impl√©mente ses propres r√®gles
- Pas de matrice de permissions centralis√©e

================================================================================
6. S√âCURIT√â ET JWT
================================================================================

üîê CONFIGURATION JWT :

STRUCTURE TOKEN :
Header: { "alg": "HS256", "typ": "JWT" }
Payload: {
  "sub": "user@cok.tn",
  "userId": 1,
  "role": "ADMIN",
  "nom": "Admin",
  "prenom": "System",
  "iat": 1691234567,
  "exp": 1691320967
}
Signature: HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(payload), secret)

üõ°Ô∏è MESURES DE S√âCURIT√â :
- Mots de passe hash√©s avec BCrypt (force 10)
- Tokens JWT sign√©s avec cl√© secr√®te
- Expiration automatique des tokens (24h)
- Validation stricte des tokens
- Protection CORS configur√©e
- Headers de s√©curit√© activ√©s

üîÑ CYCLE DE VIE TOKEN :
1. G√©n√©ration √† la connexion
2. Inclusion dans header Authorization: Bearer <token>
3. Validation √† chaque requ√™te
4. Expiration automatique
5. Renouvellement par nouvelle connexion

================================================================================
7. ENDPOINTS DISPONIBLES
================================================================================

üåê API ENDPOINTS :

POST /api/auth/login
- Description : Authentification utilisateur
- Body : LoginRequest { email, motDePasse }
- R√©ponse : LoginResponse { token, user }
- Statut : 200 (succ√®s), 401 (√©chec)

POST /api/auth/create-user
- Description : Cr√©ation nouvel utilisateur
- Body : CreateUserRequest { nom, prenom, email, motDePasse, role }
- R√©ponse : ApiResponse<User>
- Autorisation : ADMIN uniquement

GET /api/auth/health
- Description : V√©rification sant√© du service
- R√©ponse : "Service d'authentification op√©rationnel"
- Acc√®s : Public

POST /api/auth/debug-password (TEMPORAIRE)
- Description : Debug mot de passe (d√©veloppement)
- Body : { email, password }
- R√©ponse : Informations de debug

üîí AUTHENTIFICATION REQUISE :
- Header : Authorization: Bearer <jwt_token>
- Validation automatique par JwtAuthenticationFilter
- Extraction des informations utilisateur du token

================================================================================
8. GESTION DES ERREURS
================================================================================

‚ùå TYPES D'ERREURS :

ERREURS M√âTIER :
- EMAIL_NOT_FOUND : Email non trouv√© en base
- INVALID_PASSWORD : Mot de passe incorrect
- ACCOUNT_DISABLED : Compte utilisateur d√©sactiv√©
- DUPLICATE_EMAIL : Email d√©j√† utilis√©

ERREURS TECHNIQUES :
- DATABASE_ERROR : Erreur base de donn√©es
- JWT_INVALID : Token JWT invalide
- JWT_EXPIRED : Token JWT expir√©
- VALIDATION_ERROR : Erreur validation donn√©es

ERREURS SYST√àME :
- INTERNAL_SERVER_ERROR : Erreur interne
- SERVICE_UNAVAILABLE : Service indisponible

üìã FORMAT R√âPONSE ERREUR :
{
  "success": false,
  "message": "Description de l'erreur",
  "data": null,
  "timestamp": "2025-08-07T10:30:00Z"
}

üîç LOGGING :
- Niveau INFO : Connexions r√©ussies
- Niveau WARN : Tentatives √©chou√©es
- Niveau ERROR : Erreurs techniques
- Niveau DEBUG : D√©tails d√©veloppement

================================================================================
9. CONFIGURATION ET D√âPLOIEMENT
================================================================================

‚öôÔ∏è CONFIGURATION APPLICATION :

Base de donn√©es :
- URL : jdbc:postgresql://localhost:5432/auth_db
- Utilisateur : auth_user
- Pool connexions : HikariCP (max 10)

JWT :
- Algorithme : HS256
- Expiration : 86400000ms (24h)
- Cl√© secr√®te : Configurable via propri√©t√©s

S√©curit√© :
- CORS : Autoris√© pour tous les domaines (dev)
- CSRF : D√©sactiv√© (API REST)
- Sessions : Stateless

üöÄ D√âPLOIEMENT :

PR√âREQUIS :
- Java 21+
- PostgreSQL 12+
- Maven 3.6+

√âTAPES :
1. Configuration PostgreSQL
2. Cr√©ation base auth_db
3. Configuration utilisateur auth_user
4. Compilation : mvn clean compile
5. D√©marrage : mvn spring-boot:run
6. V√©rification : GET /api/auth/health

üîß MAINTENANCE :
- Surveillance logs application
- Monitoring base de donn√©es
- Rotation cl√©s JWT (recommand√©)
- Sauvegarde r√©guli√®re base

================================================================================
üìû CONTACT ET SUPPORT
================================================================================
D√©veloppeur : √âquipe COK Volley-ball
Version : 1.0.0
Derni√®re mise √† jour : 07/08/2025
================================================================================
================================================================================
                    NOUVEAUX ENDPOINTS API - SERVICE AUTHENTIFICATION
                         Plateforme Volley-ball COK
================================================================================

üéØ NOUVEAUX ENDPOINTS AJOUT√âS
================================================================================

‚úÖ ENDPOINTS CR√â√âS AVEC SUCC√àS :

1. üîß MODIFICATION D'UTILISATEUR
   - URL: PUT /api/auth/users/{userId}
   - Description: Modifie les informations d'un utilisateur existant
   - Authentification: ADMIN seulement
   - Body: UpdateUserRequest (nom, prenom, email, role, actif)

2. üóëÔ∏è SUPPRESSION D'UTILISATEUR
   - URL: DELETE /api/auth/users/{userId}
   - Description: Supprime (d√©sactive) un utilisateur
   - Authentification: ADMIN seulement
   - Action: D√©sactive le compte (actif = false)

3. üìã R√âCUP√âRATION D'UTILISATEUR PAR ID
   - URL: GET /api/auth/users/{userId}
   - Description: R√©cup√®re les informations d'un utilisateur sp√©cifique
   - Authentification: ADMIN seulement

4. üìä LISTE DE TOUS LES UTILISATEURS
   - URL: GET /api/auth/users
   - Description: R√©cup√®re tous les utilisateurs actifs
   - Authentification: ADMIN seulement

================================================================================
üß™ TESTS R√âALIS√âS AVEC SUCC√àS
================================================================================

‚úÖ Test 1: V√©rification de la sant√© du service
‚úÖ Test 2: Connexion avec l'utilisateur admin
‚úÖ Test 3: Cr√©ation d'un nouvel utilisateur
‚úÖ Test 4: R√©cup√©ration de tous les utilisateurs
‚úÖ Test 5: Modification d'un utilisateur
‚úÖ Test 6: Suppression d'un utilisateur

================================================================================
üìã EXEMPLES D'UTILISATION
================================================================================

üîê CONNEXION ADMIN :
POST http://localhost:8081/api/auth/login
{
    "email": "admin@cok.tn",
    "motDePasse": "password123"
}

üë§ CR√âATION UTILISATEUR :
POST http://localhost:8081/api/auth/create-user
{
    "nom": "Test",
    "prenom": "Joueur",
    "email": "test.joueur@cok.tn",
    "motDePasse": "password123",
    "role": "JOUEUR"
}

üìù MODIFICATION UTILISATEUR :
PUT http://localhost:8081/api/auth/users/{userId}
Authorization: Bearer {token}
{
    "nom": "Test",
    "prenom": "Joueur Modifi√©",
    "email": "test.joueur.modifie@cok.tn",
    "role": "COACH",
    "actif": true
}

üóëÔ∏è SUPPRESSION UTILISATEUR :
DELETE http://localhost:8081/api/auth/users/{userId}
Authorization: Bearer {token}

üìã R√âCUP√âRATION UTILISATEUR :
GET http://localhost:8081/api/auth/users/{userId}
Authorization: Bearer {token}

üìä LISTE UTILISATEURS :
GET http://localhost:8081/api/auth/users
Authorization: Bearer {token}

================================================================================
üîí S√âCURIT√â ET PERMISSIONS
================================================================================

‚úÖ Tous les nouveaux endpoints n√©cessitent une authentification ADMIN
‚úÖ Validation des donn√©es avec Bean Validation
‚úÖ Gestion des erreurs appropri√©e
‚úÖ Logging d√©taill√© pour le debugging
‚úÖ Suppression logique (d√©sactivation) au lieu de suppression physique

================================================================================
üèóÔ∏è ARCHITECTURE TECHNIQUE
================================================================================

üìÅ NOUVEAUX FICHIERS CR√â√âS :
- UpdateUserRequest.java : DTO pour la modification d'utilisateur
- test-api.ps1 : Script de test PowerShell

üìÅ MODIFICATIONS APPORT√âES :
- AuthController.java : Ajout des nouveaux endpoints
- AuthService.java : Ajout des nouvelles m√©thodes m√©tier
- SecurityConfig.java : Configuration des permissions

================================================================================
üöÄ D√âPLOIEMENT
================================================================================

‚úÖ Application d√©ploy√©e avec Docker Compose
‚úÖ Base de donn√©es PostgreSQL op√©rationnelle
‚úÖ Service accessible sur http://localhost:8081
‚úÖ Tests automatis√©s fonctionnels

================================================================================
üìà STATISTIQUES
================================================================================

üìä ENDPOINTS DISPONIBLES : 8
- POST /login
- POST /create-user
- PUT /users/{userId} (NOUVEAU)
- DELETE /users/{userId} (NOUVEAU)
- GET /users/{userId} (NOUVEAU)
- GET /users (NOUVEAU)
- GET /check-email
- GET /health

üîê R√îLES SUPPORT√âS : 6
- ADMIN
- COACH
- JOUEUR
- RESPONSABLE_FINANCIER
- STAFF_MEDICAL
- INVITE

================================================================================ 

================================================================================
                    NOUVEAUX R√îLES ET GESTION DES PERMISSIONS
                         Plateforme Volley-ball COK
================================================================================

üéØ MISE √Ä JOUR IMPORTANTE - NOUVEAUX R√îLES AJOUT√âS
================================================================================

üìã R√îLES COMPLETS DISPONIBLES :
================================================================================

1. ADMIN
   - Administrateur syst√®me
   - Acc√®s complet √† tous les modules
   - Gestion des utilisateurs

2. COACH  
   - Entra√Æneur de l'√©quipe
   - Gestion sportive et technique

3. JOUEUR
   - Membre de l'√©quipe
   - Participation aux activit√©s

4. RESPONSABLE_FINANCIER (NOUVEAU)
   - Gestionnaire des finances
   - Budgets, paiements, comptabilit√©

5. STAFF_MEDICAL (NOUVEAU)
   - Personnel m√©dical
   - Suivi sant√©, blessures, condition physique

6. INVITE
   - Visiteur/Invit√©
   - Acc√®s limit√© en lecture

================================================================================
üö® PHILOSOPHIE DES PERMISSIONS - TR√àS IMPORTANT !
================================================================================

‚ö†Ô∏è L'AUTH-SERVICE NE G√àRE PAS LES PERMISSIONS D√âTAILL√âES !

üéØ RESPONSABILIT√âS DE L'AUTH-SERVICE :
‚úÖ Authentifier l'utilisateur (login/password)
‚úÖ Fournir le R√îLE dans le token JWT
‚úÖ Valider les tokens JWT
‚úÖ G√©rer les sessions utilisateur

‚ùå CE QUE L'AUTH-SERVICE NE FAIT PAS :
‚ùå D√©finir qui peut faire quoi (permissions sp√©cifiques)
‚ùå Contr√¥ler l'acc√®s aux fonctionnalit√©s m√©tier
‚ùå G√©rer les r√®gles business
‚ùå Maintenir une matrice de permissions

================================================================================
üèóÔ∏è ARCHITECTURE DES PERMISSIONS
================================================================================

üìä R√âPARTITION DES RESPONSABILIT√âS :

AUTH-SERVICE :
- R√¥le : "Qui es-tu ?" 
- R√©ponse : "Tu es un COACH"

MICROSERVICE M√âTIER :
- Question : "Que peut faire un COACH ?"
- R√©ponse : "Un COACH peut cr√©er des entra√Ænements pour son √©quipe"

EXEMPLE CONCRET :

1. Utilisateur se connecte ‚Üí Auth-service dit "COACH"
2. Utilisateur veut cr√©er un match ‚Üí Service-match d√©cide selon ses r√®gles
3. Utilisateur veut voir les finances ‚Üí Service-finance refuse (pas autoris√©)
4. Utilisateur veut voir son √©quipe ‚Üí Service-equipe autorise

================================================================================
üîß IMPL√âMENTATION TECHNIQUE
================================================================================

üìã CONTENU DU TOKEN JWT :
{
  "sub": "coach@cok.tn",
  "userId": 2,
  "role": "COACH",           ‚Üê SEULE INFO FOURNIE PAR AUTH
  "nom": "Hammami",
  "prenom": "Ala",
  "iat": 1691234567,
  "exp": 1691320967
}

üîí CONTR√îLE D'ACC√àS DANS CHAQUE SERVICE :

SERVICE-MATCH :
```java
@PreAuthorize("hasRole('COACH') or hasRole('ADMIN')")
public Match createMatch(Match match) {
    // Logique m√©tier du service
}
```

SERVICE-FINANCE :
```java
@PreAuthorize("hasRole('RESPONSABLE_FINANCIER') or hasRole('ADMIN')")
public Budget getBudget() {
    // Seuls finance et admin peuvent voir
}
```

SERVICE-MEDICAL :
```java
@PreAuthorize("hasRole('STAFF_MEDICAL') or hasRole('ADMIN')")
public RapportMedical createRapport() {
    // Seul staff m√©dical peut cr√©er
}
```

================================================================================
üë• UTILISATEURS DE TEST DISPONIBLES
================================================================================

üìã COMPTES CR√â√âS AUTOMATIQUEMENT :

| Email                | Mot de passe | R√¥le                   |
|---------------------|--------------|------------------------|
| admin@cok.tn        | password123  | ADMIN                  |
| coach@cok.tn        | password123  | COACH                  |
| joueur1@cok.tn      | password123  | JOUEUR                 |
| joueur2@cok.tn      | password123  | JOUEUR                 |
| finance@cok.tn      | password123  | RESPONSABLE_FINANCIER  |
| medical@cok.tn      | password123  | STAFF_MEDICAL          |
| invite@cok.tn       | password123  | INVITE                 |

================================================================================
üß™ TESTS DES NOUVEAUX R√îLES
================================================================================

üîê TEST CONNEXION RESPONSABLE FINANCIER :
POST http://localhost:8081/api/auth/login
{
    "email": "finance@cok.tn",
    "motDePasse": "password123"
}

R√âPONSE ATTENDUE :
{
    "success": true,
    "data": {
        "token": "eyJ...",
        "user": {
            "role": "RESPONSABLE_FINANCIER",
            "email": "finance@cok.tn"
        }
    }
}

üîê TEST CONNEXION STAFF M√âDICAL :
POST http://localhost:8081/api/auth/login
{
    "email": "medical@cok.tn",
    "motDePasse": "password123"
}

R√âPONSE ATTENDUE :
{
    "success": true,
    "data": {
        "token": "eyJ...",
        "user": {
            "role": "STAFF_MEDICAL",
            "email": "medical@cok.tn"
        }
    }
}

================================================================================
üìã GUIDE POUR LES AUTRES MICROSERVICES
================================================================================

üîß COMMENT UTILISER LES R√îLES DANS VOS SERVICES :

1. R√âCUP√âRER LE R√îLE DU JWT :
```java
String role = jwtUtil.getRoleFromToken(token);
```

2. IMPL√âMENTER VOS R√àGLES M√âTIER :
```java
switch(role) {
    case "ADMIN":
        // Acc√®s complet
        break;
    case "RESPONSABLE_FINANCIER":
        // Acc√®s aux finances uniquement
        break;
    case "STAFF_MEDICAL":
        // Acc√®s aux donn√©es m√©dicales uniquement
        break;
    case "COACH":
        // Acc√®s gestion √©quipe
        break;
    case "JOUEUR":
        // Acc√®s limit√© consultation
        break;
    case "INVITE":
        // Acc√®s lecture seule
        break;
}
```

3. UTILISER LES ANNOTATIONS SPRING :
```java
@PreAuthorize("hasRole('RESPONSABLE_FINANCIER')")
@PreAuthorize("hasRole('STAFF_MEDICAL')")
@PreAuthorize("hasAnyRole('ADMIN', 'COACH')")
```

================================================================================
‚ö†Ô∏è POINTS IMPORTANTS √Ä RETENIR
================================================================================

üéØ R√àGLES D'OR :

1. L'AUTH-SERVICE fournit uniquement le R√îLE
2. Chaque microservice d√©finit ses propres permissions
3. Pas de matrice de permissions centralis√©e
4. Chaque service est responsable de sa s√©curit√©
5. Les r√¥les sont des "√©tiquettes", pas des permissions

üîí S√âCURIT√â :

- Toujours valider le token JWT
- Impl√©menter les contr√¥les dans chaque service
- Ne jamais faire confiance au client
- Logger les acc√®s pour audit

üìä √âVOLUTIVIT√â :

- Facile d'ajouter de nouveaux r√¥les
- Chaque service √©volue ind√©pendamment
- Pas de couplage fort entre services
- Flexibilit√© maximale

================================================================================
üìû SUPPORT ET QUESTIONS
================================================================================

Si vous avez des questions sur :
- L'impl√©mentation des permissions dans votre service
- L'utilisation des r√¥les
- L'int√©gration avec l'auth-service

Contactez l'√©quipe de d√©veloppement !

Version : 1.1.0 (avec nouveaux r√¥les)
Derni√®re mise √† jour : 07/08/2025
================================================================================
